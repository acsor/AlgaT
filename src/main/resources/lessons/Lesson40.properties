lesson.name = Pape-D'Esopo algorithm
lesson.description = A shortest path algorithm relying on a dequeue \
  (double-ended queue) for managing insertion and removal of vertices. \
  This algorithm, originally proposed by Pape on 1974, often proves itself as \
  the most performing one in real practice, especially with graphs being both \
  sparse and planar, that is having a number m of edges growing linearly as \
  the number n of vertices, m = O(n), and which can be drawn on a plane never \
  intersecting each other.\n\n\
  Nodes that have not been visited yet are initialized at infinite distance, \
  here represented by "inf", and the weight function is left to the implementation. \
  T[u] contains u's parent in the shortest-path tree, d[u] contains the node's \
  distance from the root, and b[u] is true if u is contained in S.
lesson.topics = Graph,Shortest paths
lesson.view = unibo.algat.view.PapeDesopoLessonView
lesson.pseudoCode = \
  PdEAlgorithm(Graph G, Node r, int[] T) \n \
    \tint[] d := new int[G.V().size()];\n \
    \tbool[] b := new bool[G.V().size()];\n \
    \tforeach u in G.V() - {r} do \n \
        \t\tT[u] := nil; \n \
        \t\td[u] := inf; \n \
        \t\tb[u] := false; \n \
    \tT[r] := nil; \n \
    \td[r] := 0; \n \
    \tb[r] := true; \n \
    \tDeQueue S := new DeQueue(); \n \
    \tS.insertHead(r);\n \
    \twhile not S.isEmpty() do \n \
        \t\tNode u := S.removeHead(); \n \
        \t\tb[u] := false; \n \
        \t\tforeach v in G.adj(u) do \n \
            \t\t\tif d[u] + w(u,v) < d[v] then \n \
                \t\t\t\t if not b[v] then \n \
                    \t\t\t\t\tif d[v] = inf then \n \
                        \t\t\t\t\t\tS.insertTail(v) else \n \
                        \t\t\t\t\t\tS.insertHead(v)\n \
                    \t\t\t\t\tb[v] := true; \n \
                \t\t\t\tT[v] := u; \n \
                \t\t\t\td[v] := d[u] + w(u,v);
