lesson.name = Dijkstra algorithm
lesson.description = This algorithm, conceived in 1956 and published in \
  1959, finds the shortest paths between nodes in a graph. Since it exists \
  in various forms, the one presented here is based on a priority queue \
  and verifying Bellman conditions, and finds the minimum path tree.\n\n\
  Nodes that have not been visited yet are initialized at infinite distance, \
  here represented by "inf", and the weight function is left to the implementation. \
  T[u] contains u's parent in the shortest-path tree, d[u] contains the node's \
  distance from the root, and b[u] is true if u is contained in S.
# CSV field containing a hierarchical list of topics the lesson belongs to
lesson.topics = Graph,Shortest paths
lesson.view = unibo.algat.view.DijkstraLessonView
lesson.pseudoCode = \
  DijstraAlgorithm(Graph G, Node r, int[] T) \n \
    \tint[] d := new int[G.V().size()];\n \
    \tbool[] b := new bool[G.V().size()];\n \
    \tPriorityQueue S := new PriorityQueue(); \n\n \
    \tforeach u in G.V() - {r} do \n \
        \t\tT[u] := nil; \n \
        \t\td[u] := inf; \n \
        \t\tb[u] := false; \n\n \
    \tT[r] := nil; \n \
    \td[r] := 0; \n \
    \tb[r] := true; \n \
    \tS.insert(r);\n\n \
    \twhile not S.isEmpty() do \n \
        \t\tNode u := S.deleteMin(); \n \
        \t\tb[u] := false; \n \
        \t\tforeach v in G.adj(u) do \n \
            \t\t\tif d[u] + w(u,v) < d[v] then \n \
                \t\t\t\tif not b[v] then \n \
                    \t\t\t\t\tS.insert(v); \n \
                    \t\t\t\t\tb[v] := true; \n \
                \t\t\t\telse \n \
                    \t\t\t\t\tS.decrease(v, d[u] + w(u,v)); \n \
                \t\t\t\tT[v] := u; \n \
                \t\t\t\td[v] := d[u] + w(u,v);