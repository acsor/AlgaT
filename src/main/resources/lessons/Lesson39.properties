lesson.name = Bellman-Ford-Moore algorithm
lesson.description = A shortest path algorithm, distinguished for \
   the use of a simple queue as the auxiliary data structure for its working. \
   This algorithm, independently discovered by several researchers, was \
   widely known since the end of 1950s. Its most notable property is a \
   polynomial time complexity even under the presence of negative edges.\n\n\
   Nodes that have not been visited yet are initialized at infinite distance, \
   here represented by "inf", and the weight function is left to the \
   implementation. T[u] contains u's parent in the shortest-path tree, d[u] \
   contains the node's distance from the root, and b[u] is true if u is \
   contained in S.
lesson.topics = Graph,Shortest paths
lesson.view = unibo.algat.view.BFMLessonView
lesson.pseudoCode = \
  BFMAlgorithm(Graph G, Node r, int[] T) \n \
    \tint[] d := new int[G.V().size()];\n \
    \tbool[] b := new bool[G.V().size()];\n \
    \tQueue S := new Queue(); \n\n \
    \tforeach u in G.V() - {r} do \n \
        \t\tT[u] := nil; \n \
        \t\td[u] := inf; \n \
        \t\tb[u] := false; \n\n \
    \tT[r] := nil; \n \
    \td[r] := 0; \n \
    \tb[r] := true; \n \
    \tS.enqueue(r);\n\n \
    \twhile not S.isEmpty() do \n \
        \t\tNode u := S.dequeue(); \n \
        \t\tb[u] := false; \n \
        \t\tforeach v in G.adj(u) do \n \
            \t\t\tif d[u] + w(u,v) < d[v] then \n \
                \t\t\t\tif not b[v] then \n \
                    \t\t\t\t\tS.enqueue(v); \n \
                    \t\t\t\t\tb[v] := true; \n \
                \t\t\t\tT[v] := u; \n \
                \t\t\t\td[v] := d[u] + w(u,v);
